cmake_minimum_required(VERSION 2.8)

project(BinaryTreePacker CXX)

file(GLOB BinaryTreePacker_src "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp")
message( STATUS ${CMAKE_CURRENT_SOURCE_DIR})

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui)
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")


# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

link_directories(${PROJECT_BINARY_DIR}/external/nanogui)
#link_directories(${PROJECT_BINARY_DIR}/lib)

add_executable( BinaryTreePacker ${BinaryTreePacker_src})
target_link_libraries( BinaryTreePacker nanogui ${NANOGUI_EXTRA_LIBS} )

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

if (MSVC)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT BinaryTreePacker)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W4 -EHsc -D_USE_MATH_DEFINES")
    add_custom_command(TARGET BinaryTreePacker POST_BUILD			                # Adds a post-build event
    COMMAND ${CMAKE_COMMAND} -E copy_if_different					                # which executes "cmake - E copy_if_different..."
        "${PROJECT_BINARY_DIR}/external/nanogui/$<CONFIGURATION>/nanogui.dll"       # <--this is in-file
        $<TARGET_FILE_DIR:BinaryTreePacker>)										# <--this is out-file path
else()
    set(CMAKE_CXX_COMPILER      "clang++" )         # 显示指定使用的C++编译器
    set(CMAKE_CXX_FLAGS   "-g")                     # 调试信息
    set(CMAKE_CXX_FLAGS   "-Wall")                  # 开启所有警告

    set(CMAKE_CXX_FLAGS_DEBUG   "-O0" )             # 调试包不优化
    set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG " )   # release包优化
endif (MSVC)